generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  createdAt DateTime @default(now())
  presentations Presentation[]
}

model Presentation {
  id          String   @id @default(cuid())
  title       String
  createdAt   DateTime @default(now())
  lastview    DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  slides      Slide[]
  feedback    Feedback[]
}

model Slide {
  id          String   @id @default(cuid())
  slideNumber Int      // To keep track of the slide number/order
  title       String?   // Optional: Title of the slide
  content     String   // Plain text content of the slide
  createdAt   DateTime @default(now())
  keycontent String?
  notes       String?
  imageUrl    String
  presentationId String
  presentation Presentation @relation(fields: [presentationId], references: [id])
}
model Feedback {
  id                String           @id @default(uuid())
  overallScore      Int              // Overall performance score
  strengths         String[]         // List of strengths
  areasForImprovement String[]      // List of areas for improvement
  pacingScore       Int              // Score for pacing
  pacingNotes       String           // Notes about pacing
  fillerWordScore   Int              // Score for filler word usage
  fillerWordCount   Int              // Count of filler words
  fillerWordNotes   String           // Notes about filler words
  clarityScore      Int              // Score for clarity
  clarityNotes      String           // Notes about clarity
  contentMatch      Int              // Percentage of content match
  aiFeedback        String             // AI-generated feedback
  audienceQuestions String[]
  slideTips         SlideTip[]       // Relation to SlideTip model
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
    presentationId String
  presentation Presentation @relation(fields: [presentationId], references: [id])
}

model SlideTip {
  id           String   @id @default(uuid())
  slide        String   // Content of the slide
  feedbacks     String   // Feedback for the slide
  feedbackId   String   // Foreign key to Feedback model
  feedback     Feedback @relation(fields: [feedbackId], references: [id])
}

